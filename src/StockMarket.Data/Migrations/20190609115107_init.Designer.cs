// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockMarket.Data;

namespace StockMarket.Data.Migrations
{
    [DbContext(typeof(StockMarketContext))]
    [Migration("20190609115107_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StockMarket.Domain.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AprovalFinish");

                    b.Property<DateTime?>("AprovalStart");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("FeedFinish");

                    b.Property<DateTime?>("FeedStart");

                    b.Property<int>("MarketId");

                    b.Property<DateTime?>("OrderFinish");

                    b.Property<DateTime?>("OrderStart");

                    b.Property<string>("Remarks");

                    b.Property<DateTime?>("ScreenFinish");

                    b.Property<DateTime?>("ScreenStart");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("StockMarket.Domain.EntryOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<string>("BrockerRef");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ExecutedQuantity");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<int>("OrderQuantity");

                    b.Property<decimal>("Price");

                    b.Property<int>("ScripId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ScripId");

                    b.ToTable("EntryOrder");
                });

            modelBuilder.Entity("StockMarket.Domain.ExitOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrockerRef");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EntryOrderId");

                    b.Property<int>("ExecutedQuantity");

                    b.Property<DateTime?>("LastModifiedDate");

                    b.Property<int>("OrderQuantity");

                    b.Property<decimal>("Price");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EntryOrderId");

                    b.ToTable("ExitOrder");
                });

            modelBuilder.Entity("StockMarket.Domain.Feed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Close");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("High");

                    b.Property<decimal>("Low");

                    b.Property<decimal>("Ltp");

                    b.Property<decimal>("Open");

                    b.Property<int>("ScripId");

                    b.Property<int?>("StatusId");

                    b.Property<int>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("ScripId");

                    b.ToTable("Feed");
                });

            modelBuilder.Entity("StockMarket.Domain.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("MarketId");

                    b.Property<string>("Reason");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("StockMarket.Domain.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Closing");

                    b.Property<string>("Name");

                    b.Property<TimeSpan>("Opening");

                    b.Property<int>("Status");

                    b.Property<int>("TimeZoneInfo");

                    b.HasKey("Id");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("StockMarket.Domain.ScanResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BatchId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<int>("Rank");

                    b.Property<int>("ScanType");

                    b.Property<int>("ScripId");

                    b.Property<int?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("ScripId");

                    b.ToTable("ScanResult");
                });

            modelBuilder.Entity("StockMarket.Domain.Scrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FaceValue");

                    b.Property<string>("Isin");

                    b.Property<DateTime?>("LastFeed");

                    b.Property<DateTime?>("LastScan");

                    b.Property<DateTime>("ListingDate");

                    b.Property<int>("MarketId");

                    b.Property<string>("Name");

                    b.Property<string>("Remarks");

                    b.Property<string>("Series");

                    b.Property<int>("Status");

                    b.Property<int>("StatusId");

                    b.Property<string>("Symbol");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("Scrip");
                });

            modelBuilder.Entity("StockMarket.Domain.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("StockMarket.Domain.Batch", b =>
                {
                    b.HasOne("StockMarket.Domain.Market", "Market")
                        .WithMany("Batch")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockMarket.Domain.EntryOrder", b =>
                {
                    b.HasOne("StockMarket.Domain.Scrip", "Scrip")
                        .WithMany("EntryOrder")
                        .HasForeignKey("ScripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockMarket.Domain.ExitOrder", b =>
                {
                    b.HasOne("StockMarket.Domain.EntryOrder", "EntryOrder")
                        .WithMany("ExitOrder")
                        .HasForeignKey("EntryOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockMarket.Domain.Feed", b =>
                {
                    b.HasOne("StockMarket.Domain.Scrip", "Scrip")
                        .WithMany("Feed")
                        .HasForeignKey("ScripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockMarket.Domain.Holiday", b =>
                {
                    b.HasOne("StockMarket.Domain.Market", "Market")
                        .WithMany("Holiday")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockMarket.Domain.ScanResult", b =>
                {
                    b.HasOne("StockMarket.Domain.Batch", "Batch")
                        .WithMany("ScanResult")
                        .HasForeignKey("BatchId");

                    b.HasOne("StockMarket.Domain.Scrip", "Scrip")
                        .WithMany("ScanResult")
                        .HasForeignKey("ScripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StockMarket.Domain.Scrip", b =>
                {
                    b.HasOne("StockMarket.Domain.Market", "Market")
                        .WithMany("Scrip")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
